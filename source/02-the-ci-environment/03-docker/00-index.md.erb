---
title:  "Docker"
doc_title: "Using Docker on Snap CI"
---

Docker support on Snap CI is in beta and is only enabled for some users. If you would like to try these features please contact us at <a href="mailto:support@snap-ci.com">Snap CI support</a>. NB: Support for Docker is only available on our new platform: "magic mongoose".

Snap CI provides support for building, testing and deploying Docker images. You can use the commands listed at <a href="https://docs.docker.com/engine/reference/commandline/cli/">docs.docker.com</a> to use Docker on Snap CI.

Snap CI provides the following Docker versions:

~~~ shell
  Package: docker
  Versions:
  1.5-1 (/var/lib/apt/lists/archive.ubuntu.com_ubuntu_dists_trusty-updates_universe_binary-amd64_Packages)
   Description Language:
                   File: /var/lib/apt/lists/archive.ubuntu.com_ubuntu_dists_trusty_universe_binary-amd64_Packages
                    MD5: 032a37ba6228c22cbca1c0b960030eaa
   Description Language: en
                   File: /var/lib/apt/lists/archive.ubuntu.com_ubuntu_dists_trusty_universe_i18n_Translation-en
                    MD5: 032a37ba6228c22cbca1c0b960030eaa

  1.4-5ubuntu1 (/var/lib/apt/lists/archive.ubuntu.com_ubuntu_dists_trusty_universe_binary-amd64_Packages)
   Description Language:
                   File: /var/lib/apt/lists/archive.ubuntu.com_ubuntu_dists_trusty_universe_binary-amd64_Packages
                    MD5: 032a37ba6228c22cbca1c0b960030eaa
   Description Language: en
                   File: /var/lib/apt/lists/archive.ubuntu.com_ubuntu_dists_trusty_universe_i18n_Translation-en
                    MD5: 032a37ba6228c22cbca1c0b960030eaa


  Reverse Depends:
    lxc-docker-1.7.1-snap-ci,docker
    docker.io,docker 1.5~
    docker.io,docker 1.5~
    pidgin,docker
    notion,docker
    pidgin,docker
  Dependencies:
  1.5-1 - libc6 (2 2.15) libglib2.0-0 (2 2.12.0) libx11-6 (0 (null))
  1.4-5ubuntu1 - libc6 (2 2.4) libglib2.0-0 (2 2.12.0) libx11-6 (0 (null))
  Provides:
  1.5-1 -
  1.4-5ubuntu1 -
  Reverse Provides:
~~~

# An example of how to build, test and deploy Docker images

In this example we build a simple Docker image for a NodeJS app, run and test it before publishing to a registry.

This example:

* Builds a Docker image for the project based on its Dockerfile
* Creates a new container based on that image and used Docker run to launch the packaged app
* Runs a simple test against the packaged application
* Deploys the freshly built image to DockerHub

## Get setup

You will need to sign up for the following services before proceeding:

* <a href="http://www.github.com/">Github</a> and validate your email address

* <a href="http://www.dockerhub.com/">Dockerhub</a>

* <a href="http://www.snap-ci.com/">Snap CI</a> and authorize Snap CI to access your Github account

## Fork the sample repository

* Login to Github and fork <a href="https://github.com/snap-ci-examples/node-js-docker">snap-ci-examples/node-js-docker</a>

* You should now see the snap-ci-examples/node-js-docker as one of your Github repositories as: github-userid/node-js-docker

## Create a public repository on Dockerhub

* Login in to Dockerhub

* Create a public repository with the name node-js-docker


## Add forked repository to Snap CI

* Go to <a href="http://www.snap-ci.com/">Snap CI</a>

* Add the node-js-docker build. The build should start and run the two default stages - FastFeedback and Integration.

## Customise your build - Add the build stage

<%#Add image of stage config%>

* Select “Customize it here”
* Edit the fast feedback stage
* Rename stage to BUILD
* Add the tasks:

<pre>
  sudo docker build -t snapci/node-docker-example .
  sudo docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
  sudo docker push snapci/node-docker-example
</pre>

* Add secure environment variables for DOCKER_EMAIL, DOCKER_USER and DOCKER_PASS. The value for these should be your DockerHub credentials
* Pin the secure environment variables. This way you won't have to endter them on other stages.

## Customise your build - Add the test stage

<%= retina_image 'screenshots/getting-started/docker-simple-test-stage-config' %>

* Add a new stage
* Name stage TEST
* Add the tasks:

docker pull snapci/node-docker-example
docker tag -f snapci/node-docker-example 5000:5000
docker run -d -p 5000:5000 snapci/node-docker-example
sleep 30
curl --fail http://localhost:5000docker push snapci/node-docker-example

## Customise your build - Add the deploy stage

<%= retina_image 'screenshots/getting-started/docker-simple-stage-config' %>

* Add a new stage
* Name stage DEPLOY
* Add the tasks:

docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
docker push snapci/node-docker-example

## Save configuration and run builds

<%= retina_image 'screenshots/getting-started/docker-simple-pipeline-snap' %>

* Save the configuration
* The build should run green and your new tested image will be deployed to Dockerhub
* Congrats!

You can see the deployment pipeline for the parent project running on <a href="https://snap-ci.com/snap-ci-examples/node-js-docker/branch/master">Snap CI</a>.

